#!/usr/bin/python

#if __name__ == '__main__' and __package__ is None:
#    from os import sys, path
#    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

import sys
import os
cur_dir = os.path.dirname(__file__)
if not cur_dir in sys.path:
    sys.path.append(cur_dir)

import web
import datetime
import json
import re

from config import es_constants
#import locals
from database import querydb
from database import crud

from apps.acquisition import get_eumetcast
from apps.acquisition import acquisition
from apps.productmanagement.datasets import Dataset
from apps.productmanagement.products import Product
from apps.analysis import mapserver

from lib.python import functions
from lib.python import es_logging as log

logger = log.my_logger(__name__)


WEBPY_COOKIE_NAME = "webpy_session_id"

urls = (
    "/pa(.*)", "ProductAcquisition",
    "/product/update", "UpdateProduct",

    "/services/checkstatusall", "CheckStatusAllServices",
    "/services/execservicetask", "ExecuteServiceTask",

    "/ingestion", "Ingestion",
    "/ingestion/update", "UpdateIngestion",

    "/dataacquisition", "DataAcquisition",
    "/dataacquisition/update", "UpdateDataAcquisition",

    "/systemsettings", "SystemSettings",
    "/systemsettings/update", "UpdateSystemSettings",
    "/systemsettings/reset", "ResetSystemSettings",

    "/processing", "Processing",
    "/processing/update", "UpdateProcessing",

    "/datasets", "DataSets",

    "/getlayer", "GetLayer",

    "/template", "TemplatePage",
    #"/(.+)/(.+)", "EsApp",
    #"/(.+)/", "EsApp",
    "/", "EsApp")

app = web.application(urls, globals(), autoreload=True)
application = app.wsgifunc()
#session = web.session.Session(app, web.session.DiskStore('../logs/mstmp/webpySessions'))


class EsApp:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        #return sys.path
        #return web.ctx
        render = web.template.render(es_constants.es2globals['base_dir']+'/apps/gui/esapp')
        return render.index()
        #getparam = web.input(lang=self.lang)
        #return render.index(getparam.lang)


class ResetSystemSettings:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        import ConfigParser
        configfilepath = es_constants.es2globals['config_dir']+'/es_constants.ini'
        config = ConfigParser.ConfigParser()
        config.read(['es_constants.ini', configfilepath])

        for option in config.options('USER_SETTINGS'):
            config.set('USER_SETTINGS', option, '')

        # Writing our configuration file to 'example.cfg' - COMMENTS ARE NOT PRESERVED!
        with open(configfilepath, 'wb') as configfile:
            config.write(configfile)

        updatestatus = '{"success":true, "message":"System settings reset to factory settings!"}'

        return updatestatus


class UpdateSystemSettings:
    def __init__(self):
        self.lang = "en"

    def PUT(self):
        import ConfigParser
        configfilepath = es_constants.es2globals['config_dir']+'/es_constants.ini'
        config = ConfigParser.ConfigParser()
        config.read(['es_constants.ini', configfilepath])

        getparams = json.loads(web.data())
        for setting in getparams['systemsettings']:
            if config.has_option('FACTORY_SETTINGS', setting) \
               and config.get('FACTORY_SETTINGS', setting, 0) == getparams['systemsettings'][setting]:
                config.set('USER_SETTINGS', setting, '')
            elif config.has_option('USER_SETTINGS', setting):
                config.set('USER_SETTINGS', setting, getparams['systemsettings'][setting])

        # Writing our configuration file to 'example.cfg' - COMMENTS ARE NOT PRESERVED!
        with open(configfilepath, 'wb') as configfile:
            config.write(configfile)

        updatestatus = '{"success":true, "message":"System settings updated!"}'

        return updatestatus


class SystemSettings:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        import ConfigParser
        config = ConfigParser.ConfigParser()
        config.read(['es_constants.ini', es_constants.es2globals['config_dir']+'/es_constants.ini'])

        systemsettings = {}
        usersettings = config.items('USER_SETTINGS')
        for setting, value in usersettings:
            if not value is None and value != "":
                systemsettings[setting] = value
            else:
                systemsettings[setting] = config.get('FACTORY_SETTINGS', setting, 0)

        #systemsettings = {'base_dir': '',
        #                  'base_tmp_dir': '',
        #                  'data_dir': '',
        #                  'static_data_dir': '',
        #                  'archive_dir': '',
        #                  'ingest_dir': '',
        #                  'eumetcast_files_dir': '',
        #                  'ingest_server_in_dir': '',
        #                  'host': '',
        #                  'port': '',
        #                  'dbuser': '',
        #                  'dbpass': '',
        #                  'dbname': ''}
        systemsettings['id'] = 0
        systemsettings_json = json.dumps(systemsettings,
                                         ensure_ascii=False,
                                         sort_keys=True,
                                         indent=4,
                                         separators=(', ', ': '))

        systemsettings_json = '{"success":true, "systemsettings":'+systemsettings_json+'}'

        #systemsettings_json = '{"success":false, "error":"No ingestions defined!"}'

        return systemsettings_json


class GetLayer:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        #import StringIO
        import mapscript

        #web.header('Content-type', 'image/png')
        #web.header('Content-transfer-encoding', 'binary')
        #buf = StringIO.StringIO()
        #mapscript.msIO_installStdoutToBuffer()
        #map = mapserver.getmap()
        ##map.save to a file fname.png
        ##web.header('Content-Disposition', 'attachment; filename="fname.png"')
        #contents = buf.getvalue()
        #return contents

        #logger.debug("MapServer: Installing stdout to buffer.")
        mapscript.msIO_installStdoutToBuffer()

        projlib = "/usr/share/proj/"
        errorfile = es_constants.apps_dir+"/analysis/ms_tmp/ms_errors.log"
        imagepath = es_constants.apps_dir+"/analysis/ms_tmp/"
        productfile = '/data/processing/vgt_ndvi/WGS84_Africa_1km/tif/ndv/20130701_vgt_ndvi_ndv_WGS84_Africa_1km.tif'

        owsrequest = mapscript.OWSRequest()

        inputparams = web.input()
        for k, v in inputparams.iteritems():
            #print k + ':' + v
            owsrequest.setParameter(k.upper(), v)

        owsrequest.setParameter("LAYERS", "vgt_ndvi_ndv_WGS84_Africa_1km")

        productmap = mapscript.mapObj(es_constants.template_mapfile)
        productmap.setConfigOption("PROJ_LIB", projlib)
        productmap.setConfigOption("MS_ERRORFILE", errorfile)

        outputformat_png = mapscript.outputFormatObj('GD/PNG', 'png')
        outputformat_png.setOption("INTERLACE", "OFF")
        productmap.appendOutputFormat(outputformat_png)
        #outputformat_gd = mapscript.outputFormatObj('GD/GIF', 'gif')
        #productmap.appendOutputFormat(outputformat_gd)
        productmap.selectOutputFormat('png')
        productmap.debug = mapscript.MS_TRUE
        productmap.status = mapscript.MS_ON
        productmap.units = mapscript.MS_DD

        coords = map(float, inputparams.BBOX.split(","))
        llx = coords[0]
        lly = coords[1]
        urx = coords[2]
        ury = coords[3]
        productmap.setExtent(llx, lly, urx, ury)   # -26, -35, 60, 38

        # epsg must be in lowercase because in unix/linux systems the proj filenames are lowercase!
        #epsg = "+init=epsg:3857"
        epsg = "+init=" + inputparams.CRS.lower()   # CRS = "EPSG:4326"
        productmap.setProjection(epsg)

        w = int(inputparams.WIDTH)
        h = int(inputparams.HEIGHT)
        productmap.setSize(w, h)

        #General web service information
        productmap.setMetaData("WMS_TITLE", "Product description")
        productmap.setMetaData("WMS_SRS", inputparams.CRS.lower())
        #productmap.setMetaData("WMS_SRS", "epsg:3857")
        productmap.setMetaData("WMS_ABSTRACT", "A Web Map Service returning EMMA raster layers.")
        productmap.setMetaData("WMS_ENABLE_REQUEST", "*")   # necessary!!


        legend_info = querydb.get_legend_info(legendid=6)
        if legend_info.__len__() > 0:
            for row in legend_info:
                minstep = row.minstep
                maxstep = row.maxstep
                minstepwidth = row.minstepwidth
                maxstepwidth = row.maxstepwidth
                totwidth = row.totwidth
                totsteps = row.totsteps

            processing_scale = 'SCALE='+str(minstep)+','+str(maxstep)  # min(legend_step.from_step) max(legend_step.to_step) example: 'SCALE=-7000,10000'

            minbuckets = 256
            maxbuckets = 10000
            num_buckets = maxbuckets
            if minstepwidth > 0:
                num_buckets = round(totwidth / minstepwidth, 0)

            if num_buckets < minbuckets:
                num_buckets = minbuckets
            elif num_buckets > maxbuckets:
                num_buckets = 0

            if num_buckets > 0:
                processing_buckets = 'SCALE_BUCKETS='+str(num_buckets)

            nodata = -32768     # get this value from the table products.product
            processing_novalue = ''
            if nodata is not None and minstep <= nodata < maxstep:
                processing_novalue = 'NODATA='+str(nodata)

            layer = mapscript.layerObj(productmap)
            layer.name = 'vgt_ndvi_ndv_WGS84_Africa_1km'
            layer.type = mapscript.MS_LAYER_RASTER
            layer.status = mapscript.MS_ON     # MS_DEFAULT
            layer.data = productfile
            layer.setProjection("+init=epsg:4326")
            layer.dump = mapscript.MS_TRUE

            # scale & buckets
            if num_buckets > 0:
                layer.setProcessing(processing_scale)
                layer.setProcessing(processing_buckets)

            if processing_novalue != '':
                layer.setProcessing(processing_novalue)

            legend_steps = querydb.get_legend_steps(legendid=6)
            if legend_steps.__len__() > 0:
                stepcount = 0
                for step in legend_steps:
                    min_step = step.from_step
                    max_step = step.to_step
                    colors = map(int, (color.strip() for color in step.color_rgb.split(" ") if color.strip()))

                    expression_string = '([pixel] >= '+str(min_step)+' and [pixel] < '+str(max_step)+')'

                    # define class object and style
                    layerclass = mapscript.classObj(layer)
                    layerclass.name = layer.name+'_'+str(stepcount)
                    layerclass.setExpression(expression_string)
                    style = mapscript.styleObj(layerclass)
                    style.color.setRGB(colors[0], colors[1], colors[2])
                    stepcount += 1

        result_map_file = es_constants.apps_dir+'/analysis/MAP_result.map'
        if os.path.isfile(result_map_file):
            os.remove(result_map_file)
        productmap.save(result_map_file)
        image = productmap.draw()
        image.save(es_constants.apps_dir+'/analysis/20130701_vgt_ndvi_ndv_WGS84_Africa_1km.png')


        contents = productmap.OWSDispatch(owsrequest)
        content_type = mapscript.msIO_stripStdoutBufferContentType()
        content = mapscript.msIO_getStdoutBufferBytes()
        #web.header = "Content-Type","%s; charset=utf-8"%content_type
        web.header('Content-type', 'image/png')
        #web.header('Content-transfer-encoding', 'binary')
        return content


class Processing:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        db_proc_products = querydb.get_processingchains_input_products()

        #   Todo JURVTK: on each call of a processing chain for a product, get the list of output (sub)products from the
        #   Todo JURVTK: processing chain algorithm using processing_std_precip . get_subprods_std_precip () and loop
        #   Todo JURVTK: this list to check the existance of the output product in the table product.process_product
        #   Todo JURVTK: Insert the output product in the table product.process_product if no record exists.
        #   Todo JURVTK:  Use: from apps . processing import processing_std_precip
        #   Todo JURVTK:       brachet l1, l2 brachet = processing_std_precip . get_subprods_std_precip ()

        if db_proc_products.__len__() > 0:
            products_dict_all = []

            # loop the products list
            for input_product in db_proc_products:
                process_id = input_product.process_id
                output_mapsetcode = input_product.output_mapsetcode
                prod_dict = input_product.__dict__
                del prod_dict['_labels']

                prod_dict['productmapsets'] = []
                mapset_info = querydb.get_mapset(mapsetcode=output_mapsetcode)

                mapset_dict = functions.row2dict(mapset_info)
                mapset_dict['mapsetoutputproducts'] = []
                output_products = querydb.get_processingchain_output_products(process_id)
                for outputproduct in output_products:
                    #outputproduct_dict = functions.row2dict(outputproduct)
                    outputproduct_dict = outputproduct.__dict__
                    del outputproduct_dict['_labels']
                    mapset_dict['mapsetoutputproducts'].append(outputproduct_dict)
                prod_dict['productmapsets'].append(mapset_dict)
                products_dict_all.append(prod_dict)

            prod_json = json.dumps(products_dict_all,
                                   ensure_ascii=False,
                                   sort_keys=True,
                                   indent=4,
                                   separators=(', ', ': '))

            datamanagement_json = '{"success":true, "total":'\
                                  + str(db_proc_products.__len__())\
                                  + ',"products":'+prod_json+'}'

        else:
            datamanagement_json = '{"success":false, "error":"No data sets defined!"}'

        return datamanagement_json


class UpdateProcessing:
    def __init__(self):
        self.lang = "en"
        self.crud_db = crud.CrudDB(schema=es_constants.es2globals['schema_products'])

    def PUT(self):
        getparams = json.loads(web.data())
        processinfo = {'process_id': getparams['products']['process_id'],
                       'process_defined_by': getparams['products']['process_defined_by'],
                       'activated': getparams['products']['activated']}

        if self.crud_db.update('processing', processinfo):
            updatestatus = '{"success":true, "message":"Process updated!"}'
        else:
            updatestatus = '{"success":false, "message":"An error occured while updating the process!"}'

        return updatestatus


class DataSets:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        # return web.ctx
        db_products = querydb.get_products(echo=False)

        if db_products.__len__() > 0:
            products_dict_all = []
            # loop the products list
            for row in db_products:
                prod_dict = functions.row2dict(row)
                productcode = prod_dict['productcode']
                version = prod_dict['version']

                p = Product(product_code=productcode, version=version)

                # does the product have mapsets AND subproducts?
                all_prod_mapsets = p.mapsets
                all_prod_subproducts = p.subproducts
                if all_prod_mapsets.__len__() > 0 and all_prod_subproducts.__len__() > 0:
                    prod_dict['productmapsets'] = []
                    for mapset in all_prod_mapsets:
                        mapset_info = querydb.get_mapset(mapsetcode=mapset, allrecs=False, echo=False)
                        mapset_dict = functions.row2dict(mapset_info)
                        mapset_dict['mapsetdatasets'] = []
                        all_mapset_datasets = p.get_subproducts(mapset=mapset)
                        for subproductcode in all_mapset_datasets:
                            dataset_info = querydb.get_subproduct(productcode=productcode,
                                                                  version=version,
                                                                  subproductcode=subproductcode,
                                                                  echo=False)

                            dataset_dict = functions.row2dict(dataset_info)
                            dataset = p.get_dataset(mapset=mapset, sub_product_code=subproductcode)
                            completeness = dataset.get_dataset_normalized_info()
                            dataset_dict['datasetcompleteness'] = completeness

                            mapset_dict['mapsetdatasets'].append(dataset_dict)
                        prod_dict['productmapsets'].append(mapset_dict)
                products_dict_all.append(prod_dict)

            prod_json = json.dumps(products_dict_all,
                                   ensure_ascii=False,
                                   sort_keys=True,
                                   indent=4,
                                   separators=(', ', ': '))

            datamanagement_json = '{"success":true, "total":'\
                                  + str(db_products.__len__())\
                                  + ',"products":'+prod_json+'}'

        else:
            datamanagement_json = '{"success":false, "error":"No data sets defined!"}'

        return datamanagement_json


class CheckStatusAllServices:
    def __init__(self):
        self.lang = "en"

    def POST(self):
        #return web.ctx
        dry_run = True

        ingest = "false"
        pid_file = es_constants.ingestion_pid_filename
        ingest_daemon = acquisition.IngestionDaemon(pid_file, dry_run=dry_run)
        if ingest_daemon.status():
            ingest = "true"

        internet = "false"
        pid_file = es_constants.get_internet_pid_filename
        getinternet_daemon = acquisition.GetInternetDaemon(pid_file, dry_run=dry_run)
        if getinternet_daemon.status():
            internet = "true"

        eumetcast = "false"
        pid_file = es_constants.get_eumetcast_pid_filename
        geteumetcast_daemon = acquisition.GetEumetcastDaemon(pid_file, dry_run=dry_run)
        if geteumetcast_daemon.status():
            eumetcast = "true"

        processing = "false"

        servicesstatus_json = '{"success": true, "eumetcast": ' + eumetcast + \
                              ', "internet": ' + internet + \
                              ', "ingest": ' + ingest + \
                              ', "processing": ' + processing + '}'

        return servicesstatus_json


class ExecuteServiceTask:
    def __init__(self):
        self.lang = "en"

    def POST(self):
        #return web.ctx
        getparams = web.input()
        if getparams.task == 'runinternet':
            # if internet_on() run getinternet service
            print 'run internet'
        if getparams.task == 'stopinternet':
            # if internet_on() run getinternet service
            print 'stop internet'
        if getparams.task == 'restartinternet':
            # if internet_on() run getinternet service
            print 'restart internet'

        servicesstatus_json = '{"success": true, "task": "' + getparams.task + '"}'
        return servicesstatus_json


class UpdateProduct:
    def __init__(self):
        self.lang = "en"
        self.crud_db = crud.CrudDB(schema=es_constants.es2globals['schema_products'])

    def PUT(self):
        getparams = json.loads(web.data())
        productinfo = {'productcode': getparams['products']['productcode'],
                       'subproductcode': getparams['products']['subproductcode'],
                       'version': getparams['products']['version'],
                       'product_type': getparams['products']['product_type'],
                       'defined_by': getparams['products']['defined_by'],
                       'activated': getparams['products']['activated']}

        if self.crud_db.update('product', productinfo):
            updatestatus = '{"success":true, "message":"Product updated!"}'
        else:
            updatestatus = '{"success":false, "message":"An error occured while updating the product!"}'

        return updatestatus


class UpdateDataAcquisition:
    def __init__(self):
        self.lang = "en"
        self.crud_db = crud.CrudDB(schema=es_constants.es2globals['schema_products'])

    def PUT(self):
        getparams = json.loads(web.data())
        dataacquisitioninfo = {'productcode': getparams['dataacquisitions']['productcode'],
                               'subproductcode': getparams['dataacquisitions']['subproductcode'],
                               'version': getparams['dataacquisitions']['version'],
                               'data_source_id': getparams['dataacquisitions']['data_source_id'],
                               'defined_by': getparams['dataacquisitions']['defined_by'],
                               'activated': getparams['dataacquisitions']['activated']}

        if self.crud_db.update('product_acquisition_data_source', dataacquisitioninfo):
            updatestatus = '{"success":true, "message":"Data source updated!"}'
        else:
            updatestatus = '{"success":false, "message":"An error occured while updating the data source!"}'

        return updatestatus


class UpdateIngestion:
    def __init__(self):
        self.lang = "en"
        self.crud_db = crud.CrudDB(schema=es_constants.es2globals['schema_products'])

    def PUT(self):
        # return web.ctx
        getparams = json.loads(web.data())
        ingestioninfo = {'productcode': getparams['ingestions']['productcode'],
                         'subproductcode': getparams['ingestions']['subproductcode'],
                         'version': getparams['ingestions']['version'],
                         'mapsetcode': getparams['ingestions']['mapsetcode'],
                         'defined_by': getparams['ingestions']['defined_by'],
                         'activated': getparams['ingestions']['activated']}
        #print ingestioninfo
        if self.crud_db.update('ingestion', ingestioninfo):
            updatestatus = '{"success":true, "message":"Ingestion updated!"}'
        else:
            updatestatus = '{"success":false, "message":"An error occured while updating the Ingestion!"}'

        return updatestatus


class Ingestion:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        #return web.ctx
        ingestions = querydb.get_ingestions(echo=False)

        if ingestions.__len__() > 0:
            ingest_dict_all = []
            for row in ingestions:
                kwargs = {'product_code': row.productcode,
                          'sub_product_code': row.subproductcode,
                          'version': row.version,
                          'mapset': row.mapsetcode}
                #kwargs.update({'to_date': datetime.date(2013, 12, 31)})
                dataset = Dataset(**kwargs)
                completeness = dataset.get_dataset_normalized_info()
                ingest_dict = functions.row2dict(row)
                ingest_dict['completeness'] = completeness
                ingest_dict_all.append(ingest_dict)

            #ingestions_json = tojson(ingestions)
            ingestions_json = json.dumps(ingest_dict_all,
                                         ensure_ascii=False,
                                         sort_keys=True,
                                         indent=4,
                                         separators=(', ', ': '))
            ingestions_json = '{"success":true, "total":'+str(ingestions.__len__())+',"ingestions":'+ingestions_json+'}'
        else:
            ingestions_json = '{"success":false, "error":"No ingestions defined!"}'

        return ingestions_json


class DataAcquisition:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        #return web.ctx

        dataacquisitions = querydb.get_dataacquisitions(echo=False)

        if dataacquisitions.__len__() > 0:
            #dataacquisitions_json = tojson(dataacquisitions)

            acq_dict_all = []
            for row in dataacquisitions:
                acq_dict = functions.row2dict(row)
                # Retrieve datetime of latest acquired file and lastest datetime
                # the acquisition was active of a specific eumetcast id
                acq_dates = get_eumetcast.get_eumetcast_info(row.data_source_id)
                if acq_dates:
                    for key in acq_dates.keys():
                        #acq_info += '"%s": "%s", ' % (key, acq_dates[key])
                        if isinstance(acq_dates[key], datetime.date):
                            datetostring = acq_dates[key].strftime("%y-%m-%d %H:%M")
                            acq_dict[key] = datetostring
                        else:
                            acq_dict[key] = acq_dates[key]
                else:
                    acq_dict['time_latest_copy'] = datetime.datetime.now().strftime("%y-%m-%d %H:%M")
                    acq_dict['time_latest_exec'] = datetime.datetime.now().strftime("%y-%m-%d %H:%M")
                    acq_dict['lenght_proc_list'] = datetime.datetime.now().strftime("%y-%m-%d %H:%M")

                acq_dict_all.append(acq_dict)
                acq_json = json.dumps(acq_dict_all,
                                      ensure_ascii=False,
                                      sort_keys=True,
                                      indent=4,
                                      separators=(', ', ': '))
                dataacquisitions_json = '{"success":true, "total":'\
                                        + str(dataacquisitions.__len__())\
                                        + ',"dataacquisitions":'+acq_json+'}'
        else:
            dataacquisitions_json = '{"success":false, "error":"No data acquisitions defined!"}'

        return dataacquisitions_json


class ProductAcquisition:
    def __init__(self):
        self.lang = "en"

    def GET(self, params):
        #return web.ctx
        getparams = web.input()
        products = querydb.get_products(echo=False, activated=getparams.activated)
        products_json = functions.tojson(products)
        products_json = '{"success":true, "total":'+str(products.__len__())+',"products":['+products_json+']}'
        return products_json


class TemplatePage:
    def __init__(self):
        self.render = web.template.render(es_constants.es2globals['base_dir']+'/templates/')

    def GET(self):
        getInput=web.input(name="World")
        return self.render.mytemplate("mytitle", getInput.name)

if __name__ == "__main__":
    app.run()