#!/usr/bin/python

#if __name__ == '__main__' and __package__ is None:
#    from os import sys, path
#    sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))

import sys
import os
cur_dir = os.path.dirname(__file__)
if not cur_dir in sys.path:
    sys.path.append(cur_dir)

import web
import locals
import datetime
import json
import re

from config import es_constants
from database import querydb
from database import crud

from apps.acquisition import get_eumetcast
from apps.acquisition import acquisition
from apps.productmanagement.datasets import Dataset
from apps.productmanagement.products import Product


def row2dict(row):
    d = {}
    for column in row.c._all_cols:
        d[column.name] = str(getattr(row, column.name))

    return d


def tojson(queryresult):
    jsonresult = ''
    for row in queryresult:
        da = row2dict(row)
        jsonresult = jsonresult + json.dumps(da,
                                             ensure_ascii=False,
                                             sort_keys=True,
                                             indent=4,
                                             separators=(',', ': ')) + ', '
    jsonresult = jsonresult[:-2]
    return jsonresult


# Return True if the date is in the correct format
def checkDateFormat(myString):
    isDate = re.match('[0-1][0-9]\/[0-3][0-9]\/[1-2][0-9]{3}', myString)
    return isDate


import urllib2
def internet_on():
    try:
        response = urllib2.urlopen('http://74.125.228.100', timeout=1)
        return True
    except urllib2.URLError as err: pass
    return False


import socket
REMOTE_SERVER = "www.google.com"
def is_connected():
  try:
    # see if we can resolve the host name -- tells us if there is
    # a DNS listening
    host = socket.gethostbyname(REMOTE_SERVER)
    # connect to the host -- tells us if the host is actually
    # reachable
    s = socket.create_connection((host, 80), 2)
    return True
  except:
     pass
  return False
print is_connected()



WEBPY_COOKIE_NAME = "webpy_session_id"

urls = (
    "/pa(.*)", "ProductAcquisition",
    "/product/update", "UpdateProduct",

    "/services/checkstatusall", "CheckStatusAllServices",
    "/services/execservicetask", "ExecuteServiceTask",

    "/ingestion", "Ingestion",
    "/ingestion/update", "UpdateIngestion",

    "/dataacquisition", "DataAcquisition",
    "/dataacquisition/update", "UpdateDataAcquisition",

    "/datasets", "DataSets",

    "/getlayer", "getLayer",

    "/template", "TemplatePage",
    #"/(.+)/(.+)", "EsApp",
    #"/(.+)/", "EsApp",
    "/", "EsApp")

app = web.application(urls, globals(), autoreload=True)
application = app.wsgifunc()
#session = web.session.Session(app, web.session.DiskStore('../logs/mstmp/webpySessions'))


class EsApp:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        #return sys.path
        #return web.ctx
        render = web.template.render(locals.es2globals['base_dir']+'/apps/gui/esapp')
        return render.index()
        #getparam = web.input(lang=self.lang)
        #return render.index(getparam.lang)


class DataSets:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        # return web.ctx
        db_products = querydb.get_products(echo=False)

        if db_products.__len__() > 0:
            products_dict_all = []
            # loop the products list
            for row in db_products:
                prod_dict = row2dict(row)
                productcode = prod_dict['productcode']
                version = prod_dict['version']
                p = Product(product_code=productcode, version=version)

                # does the product have mapsets AND subproducts?
                all_prod_mapsets = p.mapsets
                all_prod_subproducts = p.subproducts
                if all_prod_mapsets.__len__() > 0 and all_prod_subproducts.__len__() > 0:
                    prod_dict['productmapsets'] = []
                    for mapset in all_prod_mapsets:
                        mapset_info = querydb.get_mapset(mapsetcode=mapset, allrecs=False, echo=False)
                        mapset_dict = row2dict(mapset_info)
                        mapset_dict['mapsetdatasets'] = []
                        all_mapset_datasets = p.get_subproducts(mapset=mapset)
                        for subproductcode in all_mapset_datasets:
                            dataset_info = querydb.get_subproduct(productcode=productcode,
                                                                  version=version,
                                                                  subproductcode=subproductcode,
                                                                  echo=False)
                            dataset_dict = row2dict(dataset_info)
                            #if dataset_dict['product_type'] != 'Derived':
                            #if dataset_dict['productcode'] != 'vgt_fapar':
                            dataset = p.get_dataset(mapset=mapset, sub_product_code=subproductcode)
                            completeness = dataset.get_dataset_normalized_info()
                            dataset_dict['datasetcompleteness'] = completeness
                            #else:
                            #    dataset_dict['datasetcompleteness'] = {
                            #        "firstdate": "01-01",
                            #        "lastdate": "01-12",
                            #        "missingfiles": 12,
                            #        "totfiles": 12,
                            #        "intervals": [
                            #            {
                            #                "fromdate": "01-01",
                            #                "intervalpercentage": 100,
                            #                "intervaltype": "missing",
                            #                "missing": "true",
                            #                "todate": "01-12",
                            #                "totfiles": 12
                            #            }
                            #        ]
                            #    }

                            mapset_dict['mapsetdatasets'].append(dataset_dict)
                        prod_dict['productmapsets'].append(mapset_dict)
                products_dict_all.append(prod_dict)

            prod_json = json.dumps(products_dict_all,
                                   ensure_ascii=False,
                                   sort_keys=True,
                                   indent=4,
                                   separators=(', ', ': '))

            datamanagement_json = '{"success":true, "total":'\
                                  + str(db_products.__len__())\
                                  + ',"products":'+prod_json+'}'
        else:
            datamanagement_json = '{"success":false, "error":"No data sets defined!"}'

        return datamanagement_json


class CheckStatusAllServices:
    def __init__(self):
        self.lang = "en"

    def POST(self):
        #return web.ctx
        dry_run = True

        ingest = "false"
        pid_file = es_constants.ingest_pid_filename
        ingest_daemon = acquisition.IngestDaemon(pid_file, dry_run=dry_run)
        if ingest_daemon.status():
            ingest = "true"

        internet = "false"
        pid_file = es_constants.get_internet_pid_filename
        getinternet_daemon = acquisition.GetInternetDaemon(pid_file, dry_run=dry_run)
        if getinternet_daemon.status():
            internet = "true"

        eumetcast = "false"
        pid_file = es_constants.get_eumetcast_pid_filename
        geteumetcast_daemon = acquisition.GetEumetcastDaemon(pid_file, dry_run=dry_run)
        if geteumetcast_daemon.status():
            eumetcast = "true"

        processing = "false"

        servicesstatus_json = '{"success": true, "eumetcast": ' + eumetcast + \
                              ', "internet": ' + internet + \
                              ', "ingest": ' + ingest + \
                              ', "processing": ' + processing + '}'

        return servicesstatus_json


class ExecuteServiceTask:
    def __init__(self):
        self.lang = "en"

    def POST(self):
        #return web.ctx
        getparams = web.input()
        if getparams.task == 'runinternet':
            # if internet_on() run getinternet service
            print 'run internet'
        if getparams.task == 'stopinternet':
            # if internet_on() run getinternet service
            print 'stop internet'
        if getparams.task == 'restartinternet':
            # if internet_on() run getinternet service
            print 'restart internet'

        servicesstatus_json = '{"success": true, "task": "' + getparams.task + '"}'
        return servicesstatus_json


class UpdateProduct:
    def __init__(self):
        self.lang = "en"
        self.crud_db = crud.CrudDB(schema=es_constants.dbglobals['schema_products'])

    def PUT(self):
        #return web.ctx
        getparams = json.loads(web.data())
        productinfo = {'productcode': getparams['products']['productcode'],
                       'subproductcode': getparams['products']['subproductcode'],
                       'version': getparams['products']['version'],
                       'product_type': getparams['products']['product_type'],
                       'defined_by': getparams['products']['defined_by'],
                       'activated': getparams['products']['activated']}
        #print productinfo
        if self.crud_db.update('product', productinfo):
            updatestatus = '{"success":true, "message":"Product updated!"}'
        else:
            updatestatus = '{"success":false, "message":"An error occured while updating the product!"}'

        return updatestatus


class UpdateDataAcquisition:
    def __init__(self):
        self.lang = "en"
        self.crud_db = crud.CrudDB(schema=es_constants.dbglobals['schema_products'])

    def PUT(self):
        #return web.ctx
        getparams = json.loads(web.data())
        dataacquisitioninfo = {'productcode': getparams['dataacquisitions']['productcode'],
                               'subproductcode': getparams['dataacquisitions']['subproductcode'],
                               'version': getparams['dataacquisitions']['version'],
                               'data_source_id': getparams['dataacquisitions']['data_source_id'],
                               'defined_by': getparams['dataacquisitions']['defined_by'],
                               'activated': getparams['dataacquisitions']['activated']}
        #print dataacquisitioninfo
        if self.crud_db.update('product_acquisition_data_source', dataacquisitioninfo):
            updatestatus = '{"success":true, "message":"Data source updated!"}'
        else:
            updatestatus = '{"success":false, "message":"An error occured while updating the data source!"}'

        return updatestatus


class UpdateIngestion:
    def __init__(self):
        self.lang = "en"
        self.crud_db = crud.CrudDB(schema=es_constants.dbglobals['schema_products'])

    def PUT(self):
        #return web.ctx
        getparams = json.loads(web.data())
        ingestioninfo = {'productcode': getparams['ingestions']['productcode'],
                         'subproductcode': getparams['ingestions']['subproductcode'],
                         'version': getparams['ingestions']['version'],
                         'mapsetcode': getparams['ingestions']['mapsetcode'],
                         'defined_by': getparams['ingestions']['defined_by'],
                         'activated': getparams['ingestions']['activated']}
        #print ingestioninfo
        if self.crud_db.update('ingestion', ingestioninfo):
            updatestatus = '{"success":true, "message":"Ingestion updated!"}'
        else:
            updatestatus = '{"success":false, "message":"An error occured while updating the Ingestion!"}'

        return updatestatus


class Ingestion:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        #return web.ctx
        ingestions = querydb.get_ingestions(echo=False)

        if ingestions.__len__() > 0:
            ingest_dict_all = []
            for row in ingestions:
                kwargs = {'product_code': row.productcode,
                          'sub_product_code': row.subproductcode,
                          'version': row.version,
                          'mapset': row.mapsetcode}
                #kwargs.update({'to_date': datetime.date(2013, 12, 31)})
                dataset = Dataset(**kwargs)
                completeness = dataset.get_dataset_normalized_info()
                ingest_dict = row2dict(row)
                ingest_dict['completeness'] = completeness
                ingest_dict_all.append(ingest_dict)

            #ingestions_json = tojson(ingestions)
            ingestions_json = json.dumps(ingest_dict_all,
                                         ensure_ascii=False,
                                         sort_keys=True,
                                         indent=4,
                                         separators=(', ', ': '))
            ingestions_json = '{"success":true, "total":'+str(ingestions.__len__())+',"ingestions":'+ingestions_json+'}'
        else:
            ingestions_json = '{"success":false, "error":"No ingestions defined!"}'

        return ingestions_json


class DataAcquisition:
    def __init__(self):
        self.lang = "en"

    def GET(self):
        #return web.ctx

        dataacquisitions = querydb.get_dataacquisitions(echo=False)

        if dataacquisitions.__len__() > 0:
            #dataacquisitions_json = tojson(dataacquisitions)

            acq_dict_all = []
            for row in dataacquisitions:
                acq_dict = row2dict(row)
                # Retrieve datetime of latest acquired file and lastest datetime
                # the acquisition was active of a specific eumetcast id
                acq_dates = get_eumetcast.get_eumetcast_info(row.data_source_id)
                if acq_dates:
                    for key in acq_dates.keys():
                        #acq_info += '"%s": "%s", ' % (key, acq_dates[key])
                        if isinstance(acq_dates[key], datetime.date):
                            datetostring = acq_dates[key].strftime("%y-%m-%d %H:%M")
                            acq_dict[key] = datetostring
                        else:
                            acq_dict[key] = acq_dates[key]
                else:
                    acq_dict['time_latest_copy'] = datetime.datetime.now().strftime("%y-%m-%d %H:%M")
                    acq_dict['time_latest_exec'] = datetime.datetime.now().strftime("%y-%m-%d %H:%M")
                    acq_dict['lenght_proc_list'] = datetime.datetime.now().strftime("%y-%m-%d %H:%M")

                acq_dict_all.append(acq_dict)
                acq_json = json.dumps(acq_dict_all,
                                      ensure_ascii=False,
                                      sort_keys=True,
                                      indent=4,
                                      separators=(', ', ': '))
                dataacquisitions_json = '{"success":true, "total":'\
                                        + str(dataacquisitions.__len__())\
                                        + ',"dataacquisitions":'+acq_json+'}'
        else:
            dataacquisitions_json = '{"success":false, "error":"No data acquisitions defined!"}'

        return dataacquisitions_json


class ProductAcquisition:
    def __init__(self):
        self.lang = "en"

    def GET(self, params):
        #return web.ctx
        getparams = web.input()
        products = querydb.get_products(echo=False, activated=getparams.activated)
        products_json = tojson(products)
        products_json = '{"success":true, "total":'+str(products.__len__())+',"products":['+products_json+']}'
        return products_json


class TemplatePage:
    def __init__(self):
        self.render = web.template.render(locals.es2globals['base_dir']+'/templates/')

    def GET(self):
        getInput=web.input(name="World")
        return self.render.mytemplate("mytitle", getInput.name)

if __name__ == "__main__":
    app.run()